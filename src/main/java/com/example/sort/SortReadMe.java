package com.example.sort;

public class SortReadMe {
    /**
     * java 常用的排序算法总结：
     *   1.总结算法详细
     *   2.总结散发时间和空间复杂，稳定度
     *   3.算法的优劣
     *
     * 排序相关的概念
     *
     *    1.基本概念
     *
     *      排序：将无序数列或集合，按某一个规则比较大小，然后按照这个大小重新升序或降序排列
     *
     *     算法的稳定性：在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，
     *                 即在原序列中r[i] = r[j]，且r[i]在r[j]之前，
     *                 而在排序后的序列中，r[i]仍在r[j]之前，
     *                 则称这种排序算法是稳定的；否则称为不稳定的
     *     稳定性：简单的说 排序前 序列中相等的元素 a=b,且a在b之前；排序后 a任然在b之前，它们的相对先后顺序不变
     *           即为稳定排序，否则不稳定
     *
     *     稳定性的意义： 如相等元素 的先后 在原数列中有意义，则排序不变，就能保持这种含义不变
     *
     *
     *    2.延伸概念
     *
     *
     *      (1)时间复杂度
     *
     *          一个算法中的语句执行次数称为语句频度或时间频度 记为T(n)
     *
     *          对于示例： for(int i=0;i<n;i++){...todo...}
     *
     *          对于这段程序的真实执行时间，是循环n次的时间之和。所以执行时间=f(n) 代表程序n次执行求和的函数
     *          则时间复杂度 T(n)=O(f(n)),大O记发代表 正比关系，也称为 算法的渐进时间复杂度
     *
     *          我们假定每次循环执行时间一样，执行时间是一个基本单位，并相对n可以忽略。
     *          最后简化 ---- T(n)=O(n)  也就是说时间复杂度相当于程序执行的频次
     *
     *          时间复杂度：是指执行当前算法所消耗的时间，时间复杂度 记作：O(n)
     *
     *          时间复杂度 与 数据规模有关，当n越大时，时间复杂度越高
     *
     *
     *          常见的时间复杂度：(时间复杂度递增)
     *
     *              常数阶 O(1)
     *
     *                  无循环体的顺序执行普通代码 如: int a=1;
     *
     *              对数阶 O(logN)
     *
     *                 循环的次数在变动，循环体中变量改变 循环次数 int i=1; while(i<n){i=i*2}
     *
     *                 i以阶乘2的速度快速逼近n,循环的了x次， x从 1~x,即 2^x 次 = n,x=log2 为底的n
     *                 所以时间复杂度,O(logn)
     *
     *              线性阶 O(n)
     *
     *                  循环n次的循环体  如：for(int i=0;i<n;i++){int x=i;}
     *
     *              线性对数阶O(nlogN)
     *
     *                 循环体中再嵌套循环体 如 int i=1; for(int j=0;j<n;j++){while(i<n){i=i*2}}
     *
     *             平方阶O(n²)/立方阶O(n³)/K次方阶O(n^k)
     *
     *                基本就是循环体中再嵌套循环体，2重 n的for循环就是n²，3重n³.... n的k次方
     *
     *             指数阶(2^n)
     *
     *               基本就是循环体循环2次，然后嵌套n重，就是 2的n次方
     *
     *
     *
     *        （2）空间复杂度
     *
     *             空间复杂度也不是用来计算程序实际占用的空间的，
     *             空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，
     *             同样反映的是一个趋势，我们用 S(n) 来定义
     *
     *             常用 O(1),O(n) O(n²)等
     *
     *             空间复杂度---->运算过程中临时占用的空间
     *
     *             O(1) 即占中空间常数级，不随n的大小变动而变动 如 int i=1；int x=10; 等
     *
     *             O(n) 如 int[] x=int[n]
     *
     *             O(n²) int[][] x=int[n][n]
     *
     *
     *
     *      3.外部排序和内部排序
     *
     *        内排序：所有排序操作都在内存中完成
     *
     *        外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；
     *
     *
     *
     *
     *    算法分类基本可以分为10种
     *
     *       (1)冒泡排序(Bubble Sort)  (2)选择排序(Selection Sort)  (3)插入排序(Insertion Sort)
     *       (4)希尔排序(Shell Sort)   (5)归并排序(Merge Sort)      (6)快速排序(Quick Sort)
     *       (7)堆排序(Heap Sort)      (8)计数排序(Counting Sort)   (9)桶排序(Bucket Sort)
     *       (10)基数排序(Radix Sort)
     *
     *
     *       1.排序算法的大类分类
     *
     *          (1)非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，
     *             因此称为非线性时间比较类排序。
     *
     *          (2) 不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，
     *              以线性时间运行，因此称为线性时间非比较类排序。
     *
     *
     *          10种算法都是内部排序，无外部排序
     *
     *           非线性时间比较类排序：
     *
     *                               交换排序 ：冒泡排序  快速排序
     *
     *                               插入排序：直接插入排序 希尔排序
     *
     *                               选择排序：简单选择排序 堆排序
     *
     *                               归并排序：二路归并排序 多路归并排序
     *
     *
     *           线性时间非比较类排序：
     *
     *                               计数排序
     *                               桶排序
     *                               基数排序
     *
     *
     *           比较排序和非比较排序的优劣
     *
     *                   常见的快速排序、归并排序、堆排序、冒泡排序等属于比较排序。
     *               在排序的最终结果里，元素之间的次序依赖于它们之间的比较。每个数都必须和其他数进行比较，才能确定自己的位置。
     *              在冒泡排序之类的排序中，问题规模为n，又因为需要比较n次，所以平均时间复杂度为O(n²)。
     *              在归并排序、快速排序之类的排序中，问题规模通过分治法消减为logN次，所以时间复杂度平均O(nlogn)。
     *              比较排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。可以说，
     *              比较排序适用于一切需要排序的情况。
     *
     *                  计数排序、基数排序、桶排序则属于非比较排序。非比较排序是通过确定每个元素之前，应该有多少个元素来排序。
     *              针对数组arr，计算arr[i]之前有多少个元素，则唯一确定了arr[i]在排序后数组中的位置。
     *              非比较排序只要确定每个元素之前的已有的元素个数即可，所有一次遍历即可解决。算法时间复杂度O(n)。
     *              非比较排序时间复杂度低，但由于非比较排序需要占用空间来确定唯一位置。所以对数据规模和数据分布有一定的要求
     *
     *
     *           具体的算法分类和描述
     *
     *
     *              1.冒泡排序
     *
     *                 基本思路：两个数比较大小，较大的数下沉，较小的数冒起来
     *
     *                 描述：
     *                      (1)比较相邻的元素。如果第一个比第二个大，就交换它们两个
     *                      (2)对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数
     *                      (3)针对所有的元素重复以上的步骤，除了最后一个
     *                      (4)重复步骤(1)~(3)，直到排序完成
     *
     *                 算法的时间复杂度：最佳情况：T(n) = O(n)   最差情况：T(n) = O(n2)   平均情况：T(n) = O(n2)
     *
     *              2.选择排序
     *
     *                   基本思路：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，
     *                            然后，再从剩余未排序元素中继续寻找最小（大）元素，
     *                            然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕
     *
     *                   描述： (n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果)
     *
     *                        (1)初始状态：无序区为R[1..n]，有序区为空
     *                        (2)第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。
     *                           该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，
     *                           使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区
     *                        (3)n-1趟结束，数组有序化了
     *
     *                   作用与好处：表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，
     *                               所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧
     *
     *                  算法的时间复杂度： 最佳情况：T(n) = O(n2)  最差情况：T(n) = O(n2)  平均情况：T(n) = O(n2)
     *
     *              3.插入排序
     *
     *                    基本思路：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。
     *                             插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），
     *                             因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
     *
     *                    描述：
     *                         (1)从第一个元素开始，该元素可以认为已经被排序
     *                         (2)取出下一个元素，在已经排序的元素序列中从后向前扫描
     *                         (3)如果该元素（已排序）大于新元素，将该元素移到下一位置
     *                         (4)重复步骤(3)，直到找到已排序的元素小于或者等于新元素的位置
     *                         (5)将新元素插入到该位置后
     *                         (6)重复步骤(2)~(5)
     *
     *                   算法的时间复杂度：最佳情况：T(n) = O(n)   最坏情况：T(n) = O(n2)   平均情况：T(n) = O(n2)
     *
     *
     *                4.希尔排序
     *
     *                     基本思路：希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，
     *                              也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。
     *                              它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。
     *
     *                              希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，
     *                              每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止
     *
     *                     描述： 选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，
     *                            这种增量选择我们可以用一个序列来表示，{n/2,n/4,n/8,n/16...1}，称为增量序列
     *
     *                            先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序:
     *
     *                            (1)选择一个增量序列t1，t2，…，tk，其中ti>tj，tk=1；
     *                            (2)按增量序列个数k，对序列进行k 趟排序
     *                            (3)每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，
     *                               分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，
     *                               表长度即为整个序列的长度
     *
     *                     算法的时间复杂度：最佳情况：T(n) = O(nlog2 n)  最坏情况：T(n) = O(nlog2 n)
     *                                      平均情况：T(n) =O(nlog2n)
     *
     *
     *                5.归并排序
     *
     *                     基本思路：归并排序是建立在归并操作上的一种有效的排序算法。
     *                              该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。
     *
     *                              归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；
     *                              即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并
     *
     *                     描述：
     *
     *                           (1)把长度为n的输入序列分成两个长度为n/2的子序列
     *                           (2)对这两个子序列分别采用归并排序
     *                           (3)将两个排序好的子序列合并成一个最终的排序序列
     *
     *                     好处和作用：和选择排序一样，归并排序的性能不受输入数据的影响，
     *                                但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间
     *
     *                     算法的时间复杂度：最佳情况：T(n) = O(n)  最差情况：T(n) = O(nlogn) 平均情况：T(n) = O(nlogn)
     *
     *               6.快速排序
     *
     *                     基本思路：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，
     *                              则可分别对这两部分记录继续进行排序，以达到整个序列有序
     *
     *                     描述：
     *                            快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。
     *
     *                           (1)从数列中挑出一个元素，称为 “基准”（pivot）
     *                           (2)重新排序数列，所有元素比基准值小的摆放在基准前面，
     *                              所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。
     *                              在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作
     *                           (3)递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序
     *
     *
     *                    算法的时间复杂度：最佳情况：T(n) = O(nlogn)   最差情况：T(n) = O(n2) 平均情况：T(n) = O(nlogn)
     *
     *
     *               7.堆排序
     *
     *                   基本思路：堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的
     *                            结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点
     *
     *
     *                   描述：
     *
     *                        (1)将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；
     *                        (2)将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)
     *                           和新的有序区(Rn),且满足R[1,2…n-1]<=R[n]
     *                        (3)由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，
     *                           然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)
     *                           不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。
     *
     *                   算法的时间复杂度：最佳情况：T(n) = O(nlogn) 最差情况：T(n) = O(nlogn) 平均情况：T(n) = O(nlogn)
     *
     *
     *              8.计数排序
     *
     *                    基本思路：计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。
     *                             作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数
     *
     *                             计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，
     *                             其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。
     *                             它只能对整数进行排序。
     *
     *                    描述：
     *
     *                          (1)找出待排序的数组中最大和最小的元素
     *                          (2)统计数组中每个值为i的元素出现的次数，存入数组C的第i项
     *                          (3)对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）
     *                          (4)反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1
     *
     *                   算法的时间复杂度：最佳情况：T(n) = O(n+k)  最差情况：T(n) = O(n+k)  平均情况：T(n) = O(n+k)
     *
     *                                    当输入的元素是n 个0到k之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，
     *                                    排序的速度快于任何比较排序算法。由于用来计数的数组C的长度取决于待排序数组中数据
     *                                    的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很
     *                                    大的数组，需要大量时间和内存。
     *
     *
     *              9.桶排序
     *
     *                   基本思路：桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定
     *
     *                             假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序
     *                             （有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排
     *
     *                   描述：
     *
     *                         (1)人为设置一个BucketSize，作为每个桶所能放置多少个不同数值
     *                            （例如当BucketSize==5时，该桶可以存放｛1,2,3,4,5｝这几种数字，
     *                             但是容量不限，即可以存放100个3）
     *                         (2)遍历输入数据，并且把数据一个一个放到对应的桶里去
     *                         (3)对每个不是空的桶进行排序，可以使用其它排序方法，也可以递归使用桶排序
     *                         (4)从不是空的桶里把排好序的数据拼接起来
     *
     *                    注意:如果递归使用桶排序为各个桶排序，
     *                          则当桶数量为1时要手动减小BucketSize增加下一循环桶的数量，否则会陷入死循环，导致内存溢出
     *
     *                  算法的时间复杂度：最佳情况：T(n) = O(n+k)   最差情况：T(n) = O(n+k)   平均情况：T(n) = O(n2)　
     *
     *                                   桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，
     *                                   取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。
     *                                   很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。
     *                                   但相应的空间消耗就会增大　
     *
     *               10.基数排序
     *
     *                      基本思路：基数排序也是非比较的排序算法，
     *                               对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度,k为数组中的数的最大的位数
     *
     *                               基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。
     *                               有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。
     *                               最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。
     *                               基数排序基于分别排序，分别收集，所以是稳定的
     *
     *                      描述：
     *
     *                            (1)取得数组中的最大数，并取得位数
     *                            (2)arr为原始数组，从最低位开始取每个位组成radix数组
     *                            (3)对radix进行计数排序（利用计数排序适用于小范围数的特点）
     *
     *
     *                     排序方式：MSD-->从高位开始进行排序  LSD-->从低位开始进行排序
     *
     *                     算法的时间复杂度：最佳情况：T(n) = O(n * k)  最差情况：T(n) = O(n * k) 平均情况：T(n) = O(n * k)
     *
     *
     *              非比较排序 对比：
     *
     *                   基数排序 vs 计数排序 vs 桶排序
     *
     *                     基数排序：根据键值的每位数字来分配桶
     *                     计数排序：每个桶只存储单一键值
     *                     桶排序：每个桶存储一定范围的数值
     *
     *
     *              各种排序的时间复杂度和空间复杂度表
     *
     *     排序算法------平均时间复杂度------最好情况------最坏情况------空间复杂度------排序算法------稳定性
     *
     *     冒泡排序         O(n²)             O(n)         O(n²)          O(1)        in-place       稳定
     *
     *     选择排序         O(n²)             O(n²)        O(n²)          O(1)        in-place      不稳定
     *
     *     插入排序         O(n²)             O(n)         O(n²)          O(1)        in-place       稳定
     *
     *     希尔排序         O(n^1.3)        O(nlogn)      O(n²)          O(1)        in-place     不稳定
     *
     *     归并排序         O(nlog₂n)        O(nlog₂n)     O(nlog₂n)      O(n)        out-place     稳定
     *
     *     快速排序         O(nlog₂n)       O(nlog₂n)      O(n²)          O(nlog₂n)     in-place     不稳定
     *
     *     堆排序           O(nlog₂n)       O(nlog₂n)     O(nlog₂n)        O(1)        in-place     不稳定
     *
     *     计数排序         O(n+k)          O(n+k)        O(n+k)          O(k)        out-place     稳定
     *
     *       桶排序         O(n+k)          O(n+k)        O(n²)           O(n+k)      out-place     稳定
     *
     *     基数排序         O(n*k)          O(n*k)       O(n*k)           O(n+k)      out-place     稳定
     *
     *
     *     注：n：代表数据规模  k：代表 桶 的个数  d代表最大数的位数
     *         in-place 占用常数内存，不占用额外内存
     *         out-place 由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行
     *
     *
     *         基数排序 vs 计数排序 vs 桶排序
     *
     *         基数排序：根据键值的每位数字来分配桶
     *         计数排序：每个桶只存储单一键值
     *         桶排序：每个桶存储一定范围的数值
     *
     *         计数排序 复杂度O( k+n) 要求：被排序的数是0~k范围内的整数
     *        基数排序 复杂度O( d(k+n) ) 要求：d位数，每个数位有k个取值
     *       桶排序 复杂度 O( n ) （平均） 要求：被排序数在某个范围内，并且服从均匀分布
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     *
     */
}
