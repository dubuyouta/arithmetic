package com.example.algorithm.test1.number;

/**
 * @author: heshineng
 * @createdBy: 2020/5/21 10:42
 */
public class Test48 {
    /**
     * 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
     */

    public static void main(String[] args) {
        Test48 test48 = new Test48();
        System.out.println(test48.add(11,5));
    }

    /**
     * 两个数相加，不能使用四则运算，就只能使用位运算
     * 首先要搞清楚 十进制转2进制相加的逻辑
     * 二进制相加，是按位加，相同位都为1，得0，并需要往前进位
     *  5=0101  11=1011
     *   0101
     *   1011   +
     *  10000  后4位相加得： 1110   但最后一位都是为1 相加得到的0，需要往前
     *  进位，然后前面都是1，都需要往前进位，所以最后的结果为 10000
     *
     *  所以2个数据 的二进制相加，就是需要处理 两个数据相加后得到数据，
     *  然后相加之后，还要处理进位问题。
     *
     *  1.两个数相加，使用异或来处理，得到数据 是没有进位之后的数据
     *  2.2个数据相加的进位，可以使用 2个数 与 &运算，得到原始2个数据都为1的位
     *  再将 这个数左移一位
     *
     *  继续循环整个过程
     */
    private int add(int a, int b) {
        while (b!=0){
            int sum=a^b;//得到 ab 未进位加的数据
            b=(a&b)<<1;//得到需要移位后 的数据
            a=sum;
        }
        return a;
    }
}
